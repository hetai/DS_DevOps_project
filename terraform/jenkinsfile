pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_DEFAULT_REGION    = "eu-west-3"
    }

    parameters {
        choice(
            name: 'ACTION',
            choices: ['apply', 'destroy'],
            description: 'Terraform action to perform (apply = create/update, destroy = delete)'
        )
    }

    stages {
        stage('Checkout SCM') {
            steps {
                git branch: 'Dev/setup_inital_codebase', url: 'https://github.com/hetai/DS_DevOps_project.git'
            }
        }

        stage('Terraform Init for EKS') {
            steps {
                dir('terraform/eks') {
                    sh 'terraform init -reconfigure'
                }
            }
        }

        stage('Format Terraform Code') {
            steps {
                dir('terraform/eks') {
                    sh 'terraform fmt -check'
                }
            }
        }

        stage('Validate Terraform Code') {
            steps {
                dir('terraform/eks') {
                    sh 'terraform validate'
                }
            }
        }

        stage('Plan Terraform Changes') {
            steps {
                dir('terraform/eks') {
                    sh 'terraform plan'
                }
            }
        }

        stage('Manual Approval') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                input(message: "Proceed with Terraform ${params.ACTION}?", ok: "Yes, proceed")
            }
        }

        stage('Apply/Destroy EKS Cluster') {
            steps {
                dir('terraform/eks') {
                    sh "terraform ${params.ACTION} --auto-approve"
                }
            }
        }

        stage('Check EKS Cluster Status') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                script {
                    def clusterName = sh(
                        script: "terraform -chdir=terraform/eks output -raw cluster_name",
                        returnStdout: true
                    ).trim()
                    def status = sh(
                        script: """
                            aws eks describe-cluster --region eu-west-3 --name ${clusterName} --query 'cluster.status' --output text || echo 'NOT_FOUND'
                        """,
                        returnStdout: true
                    ).trim()
                    echo "EKS Cluster status: ${status}"
                    if (status == 'NOT_FOUND') {
                        error("EKS cluster does not exist or is not accessible.")
                    }
                }
            }
        }

        stage('Deploy to EKS (Nginx Example)') {
            when {
                allOf {
                    expression { params.ACTION == 'apply' }
                    expression { fileExists('terraform/eks/ConfigurationFiles/deployment.yaml') }
                }
            }
            steps {
                dir('terraform/eks/ConfigurationFiles') {
                    script {
                        def clusterName = sh(
                            script: "terraform -chdir=../ output -raw cluster_name",
                            returnStdout: true
                        ).trim()
                        sh "aws eks update-kubeconfig --region eu-west-3 --name ${clusterName}"
                        sh 'kubectl apply -f deployment.yaml'
                    }
                }
            }
        }
    }
}