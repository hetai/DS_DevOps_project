version: 0.2

env:
  variables:
    DEPLOYMENT_TIMEOUT: 600
    HEALTH_CHECK_TIMEOUT: 300
    ROLLBACK_ENABLED: true

phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - echo "Installing deployment tools..."
      - pip install --upgrade pip
      - pip install boto3 awscli
      - pip install jq
      - echo "AWS CLI version:"
      - aws --version

  pre_build:
    commands:
      - echo "Pre-deployment phase started on `date`"
      - echo "Validating deployment prerequisites..."
      - echo "Environment: $ENVIRONMENT"
      - echo "ECS Cluster: $ECS_CLUSTER_NAME"
      - echo "ECS Service: $ECS_SERVICE_NAME"
      - echo "Task Definition: $TASK_DEFINITION_FAMILY"
      - echo "Container: $CONTAINER_NAME"
      
      - echo "Checking ECS cluster status..."
      - aws ecs describe-clusters --clusters $ECS_CLUSTER_NAME --query 'clusters[0].status' --output text
      
      - echo "Checking ECS service status..."
      - aws ecs describe-services --cluster $ECS_CLUSTER_NAME --services $ECS_SERVICE_NAME --query 'services[0].status' --output text
      
      - echo "Getting current task definition..."
      - CURRENT_TASK_DEFINITION=$(aws ecs describe-services --cluster $ECS_CLUSTER_NAME --services $ECS_SERVICE_NAME --query 'services[0].taskDefinition' --output text)
      - echo "Current task definition: $CURRENT_TASK_DEFINITION"
      
      - echo "Creating backup of current deployment..."
      - aws ecs describe-task-definition --task-definition $CURRENT_TASK_DEFINITION --query 'taskDefinition' > current-task-definition-backup.json

  build:
    commands:
      - echo "Deployment phase started on `date`"
      
      - echo "Preparing new task definition..."
      - if [ -f "imagedefinitions.json" ]; then
          NEW_IMAGE_URI=$(cat imagedefinitions.json | jq -r '.[0].imageUri')
          echo "New image URI: $NEW_IMAGE_URI"
        else
          echo "Error: imagedefinitions.json not found"
          exit 1
        fi
      
      - echo "Retrieving current task definition..."
      - aws ecs describe-task-definition --task-definition $TASK_DEFINITION_FAMILY --query 'taskDefinition' > task-definition.json
      
      - echo "Updating task definition with new image..."
      - python3 -c "
import json
import sys

with open('task-definition.json', 'r') as f:
    task_def = json.load(f)

# Remove fields that are not needed for registration
fields_to_remove = ['taskDefinitionArn', 'revision', 'status', 'requiresAttributes', 'placementConstraints', 'compatibilities', 'registeredAt', 'registeredBy']
for field in fields_to_remove:
    if field in task_def:
        del task_def[field]

# Update the container image
container_updated = False
for container in task_def['containerDefinitions']:
    if container['name'] == '$CONTAINER_NAME':
        container['image'] = '$NEW_IMAGE_URI'
        container_updated = True
        break

if not container_updated:
    print('Error: Container $CONTAINER_NAME not found in task definition')
    sys.exit(1)

# Add deployment metadata
if 'tags' not in task_def:
    task_def['tags'] = []

task_def['tags'].append({
    'key': 'DeploymentDate',
    'value': '$(date -u +%Y-%m-%dT%H:%M:%SZ)'
})

task_def['tags'].append({
    'key': 'BuildId',
    'value': '$CODEBUILD_BUILD_ID'
})

task_def['tags'].append({
    'key': 'Environment',
    'value': '$ENVIRONMENT'
})

with open('new-task-definition.json', 'w') as f:
    json.dump(task_def, f, indent=2)
"
      
      - echo "Registering new task definition..."
      - NEW_TASK_DEFINITION_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
      - echo "New task definition registered: $NEW_TASK_DEFINITION_ARN"
      
      - echo "Performing blue-green deployment..."
      - echo "Updating ECS service..."
      - aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --task-definition $NEW_TASK_DEFINITION_ARN
      
      - echo "Waiting for deployment to complete..."
      - aws ecs wait services-stable --cluster $ECS_CLUSTER_NAME --services $ECS_SERVICE_NAME --cli-read-timeout $DEPLOYMENT_TIMEOUT --cli-connect-timeout 60
      
      - echo "Checking deployment status..."
      - DEPLOYMENT_STATUS=$(aws ecs describe-services --cluster $ECS_CLUSTER_NAME --services $ECS_SERVICE_NAME --query 'services[0].deployments[0].status' --output text)
      - echo "Deployment status: $DEPLOYMENT_STATUS"
      
      - if [ "$DEPLOYMENT_STATUS" != "PRIMARY" ]; then
          echo "Deployment failed with status: $DEPLOYMENT_STATUS"
          exit 1
        fi

  post_build:
    commands:
      - echo "Post-deployment phase started on `date`"
      
      - echo "Running health checks..."
      - python3 -c "
import boto3
import requests
import time
import json

# Get ALB details
elbv2 = boto3.client('elbv2')
ecs = boto3.client('ecs')

# Get the target group ARN from ECS service
service_details = ecs.describe_services(
    cluster='$ECS_CLUSTER_NAME',
    services=['$ECS_SERVICE_NAME']
)

service = service_details['services'][0]
target_group_arn = None

for lb in service.get('loadBalancers', []):
    if 'targetGroupArn' in lb:
        target_group_arn = lb['targetGroupArn']
        break

if target_group_arn:
    print(f'Found target group: {target_group_arn}')
    
    # Check target health
    max_attempts = 30
    for attempt in range(max_attempts):
        try:
            health_response = elbv2.describe_target_health(
                TargetGroupArn=target_group_arn
            )
            
            healthy_targets = [t for t in health_response['TargetHealthDescriptions'] if t['TargetHealth']['State'] == 'healthy']
            total_targets = len(health_response['TargetHealthDescriptions'])
            
            print(f'Health check {attempt + 1}/{max_attempts}: {len(healthy_targets)}/{total_targets} targets healthy')
            
            if len(healthy_targets) > 0:
                print('Health check passed - at least one target is healthy')
                break
            
            if attempt < max_attempts - 1:
                time.sleep(10)
        except Exception as e:
            print(f'Health check error: {e}')
            if attempt < max_attempts - 1:
                time.sleep(10)
    else:
        print('Health check failed - no healthy targets found')
        exit(1)
else:
    print('No target group found for health check')
"
      
      - echo "Health checks completed successfully"
      
      - echo "Creating deployment report..."
      - python3 -c "
import json
from datetime import datetime

deployment_report = {
    'deployment_id': '$CODEBUILD_BUILD_ID',
    'environment': '$ENVIRONMENT',
    'deployment_time': '$(date -u +%Y-%m-%dT%H:%M:%SZ)',
    'cluster': '$ECS_CLUSTER_NAME',
    'service': '$ECS_SERVICE_NAME',
    'task_definition': '$NEW_TASK_DEFINITION_ARN',
    'image_uri': '$NEW_IMAGE_URI',
    'status': 'SUCCESS',
    'deployment_duration_seconds': 0,  # This would be calculated in a real implementation
    'health_check_status': 'PASSED'
}

with open('deployment-report.json', 'w') as f:
    json.dump(deployment_report, f, indent=2)
"
      
      - echo "Uploading deployment artifacts..."
      - aws s3 cp deployment-report.json s3://$ARTIFACTS_BUCKET/deployment-logs/$ENVIRONMENT/$(date +%Y%m%d-%H%M%S)/deployment-report.json
      - aws s3 cp current-task-definition-backup.json s3://$ARTIFACTS_BUCKET/deployment-logs/$ENVIRONMENT/$(date +%Y%m%d-%H%M%S)/task-definition-backup.json
      - aws s3 cp new-task-definition.json s3://$ARTIFACTS_BUCKET/deployment-logs/$ENVIRONMENT/$(date +%Y%m%d-%H%M%S)/new-task-definition.json
      
      - echo "Deployment completed successfully on `date`"

artifacts:
  files:
    - deployment-report.json
    - current-task-definition-backup.json
    - new-task-definition.json
  name: deployment-artifacts-$(date +%Y-%m-%d)

reports:
  deployment-reports:
    files:
      - deployment-report.json
    file-format: JUNITXML
    base-directory: .

cache:
  paths:
    - /root/.cache/pip/**/*