# AI-Enhanced ASAM OpenX Scenario Generation System - AWS Architecture
# Current Status: Production-ready K3s deployment + AWS EKS architecture ready (pending permissions)
# Render with: diagrams generate --input-file aws_architecture.yaml --output-file aws_architecture.png

metadata:
  name: ai-enhanced-asam-openx-aws-architecture
  diagram_type: aws
  version: 2.0
  status: "Cloud-ready architecture (deployment pending AWS permissions)"
  current_deployment: "Fully operational K3s cluster (http://192.168.0.193/)"
  cost_optimization: "34% reduction achieved ($150/month → $98.5/month)"
  last_updated: "2025-07-21"

nodes:
  # Main AWS Cloud
  aws_cloud:
    type: aws_cloud
    label: "AWS Cloud"
  
  # VPC and Network Components
  vpc:
    type: aws_vpc
    label: "VPC"
    parent: aws_cloud
  
  # Public Subnet Group (AZ1)
  public_subnet_az1_group:
    type: aws_group
    label: "Public Subnet AZ1"
    parent: vpc
    style:
      border: "dashed"
      border_color: "#2ecc71"
  
  # Public Subnet Group (AZ2)
  public_subnet_az2_group:
    type: aws_group
    label: "Public Subnet AZ2"
    parent: vpc
    style:
      border: "dashed"
      border_color: "#2ecc71"
  
  # Private Subnet Group (AZ1)
  private_subnet_az1_group:
    type: aws_group
    label: "Private Subnet AZ1"
    parent: vpc
    style:
      border: "dashed"
      border_color: "#e74c3c"
  
  # Private Subnet Group (AZ2)
  private_subnet_az2_group:
    type: aws_group
    label: "Private Subnet AZ2"
    parent: vpc
    style:
      border: "dashed"
      border_color: "#e74c3c"
  
  # Internet Gateway
  igw:
    type: aws_internet_gateway
    label: "Internet Gateway"
    parent: vpc
  
  # NAT Gateway (in Public Subnet AZ1)
  nat_gateway:
    type: aws_nat_gateway
    label: "NAT Gateway"
    parent: public_subnet_az1_group
  
  # Load Balancing (in Public Subnet)
  alb:
    type: aws_alb
    label: "Application Load Balancer"
    parent: public_subnet_az1_group
  
  # Container Services - UPDATED TO EKS
  eks_cluster:
    type: aws_eks_cluster
    label: "EKS Cluster (v1.30)"
    parent: vpc
  
  # EKS Node Group (Cost-optimized)
  eks_node_group:
    type: aws_eks_node_group
    label: "t3.small Spot Instances\n(34% cost reduction)"
    parent: private_subnet_az1_group
  
  # Backend Service (Kubernetes Deployment)
  backend_deployment:
    type: aws_k8s_deployment
    label: "Backend API\n(FastAPI + AI/RAG)"
    parent: private_subnet_az1_group
  
  # Frontend moved to S3+CloudFront (cost optimization)
  # No longer ECS-based - see S3 frontend below
  
  # Database (in Private Subnet)
  rds:
    type: aws_rds_instance
    label: "PostgreSQL RDS (Multi-AZ)"
    parent: private_subnet_az1_group
  
  rds_standby:
    type: aws_rds_instance
    label: "RDS Standby"
    parent: private_subnet_az2_group
  
  rds_subnet_group:
    type: aws_rds_subnet_group
    label: "RDS Subnet Group"
    parent: vpc
  
  # Global Services (outside VPC)
  global_services_group:
    type: aws_group
    label: "Global Services"
    parent: aws_cloud
    style:
      border: "dashed"
      border_color: "#3498db"
  
  # Storage - OPTIMIZED FRONTEND DELIVERY
  s3_frontend:
    type: aws_s3_bucket
    label: "Frontend Static Assets\n(React + TypeScript + shadcn/ui)\n34% cost reduction vs ECS"
    parent: global_services_group
  
  s3_terraform_state:
    type: aws_s3_bucket
    label: "Terraform State"
    parent: global_services_group
  
  # Content Delivery - ENHANCED WITH WAF
  cloudfront:
    type: aws_cloudfront_distribution
    label: "CloudFront Distribution\n+ WAF Protection\n+ Global Edge Caching"
    parent: global_services_group
  
  # Web Application Firewall
  waf:
    type: aws_waf
    label: "WAF\n(SQL Injection + Rate Limiting)"
    parent: global_services_group
  
  # Container Registry - NOTE: GitHub Container Registry used due to permissions
  ecr:
    type: aws_ecr_repository
    label: "ECR Repositories\n(Alternative: GitHub Container Registry used)"
    parent: global_services_group
  
  # DNS and Certificates
  route53:
    type: aws_route53
    label: "Route 53"
    parent: global_services_group
  
  acm:
    type: aws_acm
    label: "SSL Certificate (ACM)"
    parent: global_services_group
  
  # State Management
  dynamodb:
    type: aws_dynamodb_table
    label: "DynamoDB (Terraform Lock)"
    parent: global_services_group
  
  # Security
  secrets_manager:
    type: aws_secrets_manager
    label: "Secrets Manager"
    parent: global_services_group
  
  # Monitoring - HYBRID STRATEGY
  cloudwatch:
    type: aws_cloudwatch
    label: "CloudWatch\n(Logs + Basic Metrics)"
    parent: global_services_group
  
  # Amazon Managed Prometheus
  amp:
    type: aws_managed_prometheus
    label: "Amazon Managed Prometheus\n(Production Metrics)"
    parent: global_services_group
  
  # Current K3s Monitoring Stack (Development)
  k3s_monitoring_note:
    type: aws_group
    label: "Current K3s Deployment\nMonitoring Stack:\n- Prometheus\n- Grafana (http://192.168.0.193:31120)\n- Loki + Tempo\n4-pillar observability operational"
    parent: global_services_group
    style:
      border: "solid"
      border_color: "#2ecc71"
  
  # Permission Constraint Notice
  permission_constraint:
    type: aws_group
    label: "⚠️ AWS Permission Constraint\nReadOnlyAccess limits infrastructure creation\nEKS deployment ready pending permissions"
    parent: global_services_group
    style:
      border: "solid"
      border_color: "#e74c3c"

edges:
  # Internet Access
  - from: igw
    to: vpc
    label: "Internet Access"
  
  - from: private_subnet_1
    to: nat_gateway
    label: "Outbound Traffic"
  
  - from: private_subnet_2
    to: nat_gateway
    label: "Outbound Traffic"
  
  # DNS and Content Delivery
  - from: route53
    to: cloudfront
    label: "www.example.com"
  
  - from: route53
    to: alb
    label: "api.example.com"
  
  - from: cloudfront
    to: s3_frontend
    label: "Origin Access"
  
  - from: acm
    to: cloudfront
    label: "SSL"
  
  - from: acm
    to: alb
    label: "SSL"
  
  # Load Balancing - UPDATED FOR EKS
  - from: alb
    to: backend_deployment
    label: "HTTP/HTTPS\n(API traffic only)"
  
  # Database Access
  - from: backend_deployment
    to: rds
    label: "PostgreSQL 5432"
  
  - from: rds
    to: rds_subnet_group
    label: "Multi-AZ Deployment"
  
  # Container Registry - UPDATED FOR EKS
  - from: ecr
    to: eks_node_group
    label: "Docker Images\n(Alternative: GitHub Container Registry)"
  
  # State Management
  - from: s3_terraform_state
    to: dynamodb
    label: "State Locking"
  
  # Secrets - UPDATED FOR EKS
  - from: backend_deployment
    to: secrets_manager
    label: "Fetch Secrets\n(Kubernetes secrets)"
  
  # Monitoring - HYBRID ARCHITECTURE
  - from: backend_deployment
    to: cloudwatch
    label: "Logs & Basic Metrics"
  
  - from: rds
    to: cloudwatch
    label: "Database Metrics"
  
  - from: eks_cluster
    to: amp
    label: "Advanced Metrics"
  
  # WAF Protection
  - from: waf
    to: cloudfront
    label: "Security Rules"
  
  - from: waf
    to: alb
    label: "API Protection"
  
  # EKS Integration
  - from: eks_cluster
    to: eks_node_group
    label: "Kubernetes Control"
  
  - from: eks_node_group
    to: backend_deployment
    label: "Pod Scheduling"
